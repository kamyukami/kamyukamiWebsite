<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Boids Shader Visible</title>
  <style>
    html, body {
      margin: 0;
      overflow: hidden;
      background: black;
    }

    #textOverlay {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-family: 'Arial Black', sans-serif;
      font-size: 72px;
      color: white;
      mix-blend-mode: difference;
      pointer-events: none;
      z-index: 1;
    }

    canvas {
      display: block;
      width: 100vw;
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 0;
    }
  </style>
</head>
<body>
  <div id="textOverlay">ESSAIM</div>
  <canvas id="glCanvas"></canvas>

  <script type="x-shader/x-vertex" id="vertexShader">
    attribute vec2 aPosition;
    varying vec2 vUv;
    void main() {
      vUv = aPosition * 0.5 + 0.5;
      gl_Position = vec4(aPosition, 0.0, 1.0);
    }
  </script>

  <script type="x-shader/x-fragment" id="fragmentShader">
    precision highp float;
    uniform float uTime;
    uniform vec2 uResolution;
    uniform vec2 uMouse;
    varying vec2 vUv;

    float random(vec2 p) {
      return fract(sin(dot(p, vec2(23.1407, 2.665))) * 43758.5453);
    }

    void main() {
      vec2 uv = gl_FragCoord.xy / uResolution.xy;
      vec3 color = vec3(0.0);

      for (float i = 0.0; i < 150.0; i++) {
        float id = i / 150.0;
        float angle = id * 6.283 + uTime * 0.3;
        vec2 p = vec2(
          0.5 + 0.3 * cos(angle + id * 12.0 + uTime * 0.5),
          0.5 + 0.3 * sin(angle + id * 15.0 + uTime * 0.4)
        );

        // Mouse interaction
        vec2 diff = uv - (uMouse / uResolution);
        float distMouse = length(p - (uMouse / uResolution));
        float repel = smoothstep(0.25, 0.0, distMouse);

        float d = length(uv - p);
        float strength = 0.01 / (d * d + 0.001);
        color += vec3(0.1, 1.0, 0.8) * strength * repel;
      }

      gl_FragColor = vec4(color, 1.0);
    }
  </script>

  <script>
    const canvas = document.getElementById("glCanvas");
    const gl = canvas.getContext("webgl");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const vertexSource = document.getElementById("vertexShader").textContent;
    const fragmentSource = document.getElementById("fragmentShader").textContent;

    function compileShader(type, source) {
      const shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.error(gl.getShaderInfoLog(shader));
      }
      return shader;
    }

    const vertexShader = compileShader(gl.VERTEX_SHADER, vertexSource);
    const fragmentShader = compileShader(gl.FRAGMENT_SHADER, fragmentSource);

    const program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    gl.useProgram(program);

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
      -1, -1,
      1, -1,
      -1, 1,
      -1, 1,
      1, -1,
      1, 1
    ]), gl.STATIC_DRAW);

    const positionLocation = gl.getAttribLocation(program, "aPosition");
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

    const uTime = gl.getUniformLocation(program, "uTime");
    const uResolution = gl.getUniformLocation(program, "uResolution");
    const uMouse = gl.getUniformLocation(program, "uMouse");

    let mouse = [canvas.width / 2, canvas.height / 2];
    window.addEventListener("mousemove", e => {
      mouse = [e.clientX, canvas.height - e.clientY];
    });

    function render(time) {
      gl.viewport(0, 0, canvas.width, canvas.height);
      gl.clearColor(0, 0, 0, 1);
      gl.clear(gl.COLOR_BUFFER_BIT);

      gl.uniform1f(uTime, time * 0.001);
      gl.uniform2f(uResolution, canvas.width, canvas.height);
      gl.uniform2f(uMouse, mouse[0], mouse[1]);

      gl.drawArrays(gl.TRIANGLES, 0, 6);
      requestAnimationFrame(render);
    }

    render();
  </script>
</body>
</html>
